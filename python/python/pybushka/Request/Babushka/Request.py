# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Babushka

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Request(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Request()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Request
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Request
    def CallbackIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Request
    def RequestType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Request
    def Arg(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Request
    def ArgLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Request
    def ArgIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def RequestStart(builder): builder.StartObject(3)
def Start(builder):
    return RequestStart(builder)
def RequestAddCallbackIdx(builder, callbackIdx): builder.PrependUint32Slot(0, callbackIdx, 0)
def AddCallbackIdx(builder, callbackIdx):
    return RequestAddCallbackIdx(builder, callbackIdx)
def RequestAddRequestType(builder, requestType): builder.PrependUint32Slot(1, requestType, 0)
def AddRequestType(builder, requestType):
    return RequestAddRequestType(builder, requestType)
def RequestAddArg(builder, arg): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(arg), 0)
def AddArg(builder, arg):
    return RequestAddArg(builder, arg)
def RequestStartArgVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartArgVector(builder, numElems):
    return RequestStartArgVector(builder, numElems)
def RequestEnd(builder): return builder.EndObject()
def End(builder):
    return RequestEnd(builder)